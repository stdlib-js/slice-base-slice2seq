{"version":3,"file":"browser.js","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Converts a Slice object to a subsequence string.\n*\n* @param {Slice} slice - slice object\n* @returns {string} subsequence string\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n*\n* var str = slice2seq( new Slice( null, null, null ) );\n* // returns ':'\n*\n* str = slice2seq( new Slice() );\n* // returns ':'\n*\n* str = slice2seq( new Slice( null ) );\n* // returns ':'\n*\n* str = slice2seq( new Slice( 10 ) );\n* // returns ':10'\n*\n* str = slice2seq( new Slice( -1 ) );\n* // returns ':-1'\n*\n* str = slice2seq( new Slice( 2, 10 ) );\n* // returns '2:10'\n*\n* str = slice2seq( new Slice( -2, 10 ) );\n* // returns '-2:10'\n*\n* str = slice2seq( new Slice( -2, -10 ) );\n* // returns '-2:-10'\n*\n* str = slice2seq( new Slice( 2, null ) );\n* // returns '2:'\n*\n* str = slice2seq( new Slice( null, 10 ) );\n* // returns ':10'\n*\n* str = slice2seq( new Slice( 2, 10, 2 ) );\n* // returns '2:10:2'\n*\n* str = slice2seq( new Slice( -1, null, -1 ) );\n* // returns '-1::-1'\n*\n* str = slice2seq( new Slice( -1, -5, -1 ) );\n* // returns '-1:-5:-1'\n*\n* str = slice2seq( new Slice( -1, 10, -1 ) );\n* // returns '-1:10:-1'\n*\n* str = slice2seq( new Slice( 1, -1, 2 ) );\n* // returns '1:-1:2'\n*\n* str = slice2seq( new Slice( null, null, -1 ) );\n* // returns '::-1'\n*/\nfunction slice2seq( slice ) {\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\ti = slice.start;\n\tj = slice.stop;\n\tk = slice.step;\n\n\tif ( i === null ) {\n\t\tout = '';\n\t} else {\n\t\tout = String( i );\n\t}\n\tif ( j === null ) {\n\t\tif ( k === null ) {\n\t\t\treturn out + ':';    // e.g., ':', '2:', '-1:'\n\t\t}\n\t\tif ( out === '' ) {\n\t\t\treturn '::' + k;     // e.g., '::2', '::-1'\n\t\t}\n\t\treturn out + '::' + k;   // e.g., '1::2', '10::-1'\n\t}\n\tout += ':' + j;\n\tif ( k === null ) {\n\t\treturn out;              // e.g., ':10', ':-1'\n\t}\n\treturn out + ':' + k;        // e.g., ':10:2', ':-1:-1', '1:10:2', '10:2:-1', '-1:-5:-1'\n}\n\n\n// EXPORTS //\n\nexport default slice2seq;\n"],"names":["slice","out","i","j","k","start","stop","step","String"],"mappings":";gDA+EA,SAAoBA,GACnB,IAAIC,EACAC,EACAC,EACAC,EAWJ,OATAF,EAAIF,EAAMK,MACVF,EAAIH,EAAMM,KACVF,EAAIJ,EAAMO,KAGTN,EADU,OAANC,EACE,GAEAM,OAAQN,GAEJ,OAANC,EACO,OAANC,EACGH,EAAM,IAED,KAARA,EACG,KAAOG,EAERH,EAAM,KAAOG,GAErBH,GAAO,IAAME,EACF,OAANC,EACGH,EAEDA,EAAM,IAAMG,EACpB"}